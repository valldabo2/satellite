worker_processes 1;
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  server_tokens off;

  include mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  # Content compression.
  gzip  on;
  # Add the right vary header so that upstream caching works correctly.
  gzip_vary  on;
  # Allow all proxied requests to be compressed.
  gzip_proxied  any;
  # Compression level; this is a reasonable speed/cpu tradeoff.
  gzip_comp_level  6;
  # Don't bother with small requests.
  gzip_min_length  1000;
  # Specify the content types to compress.
  gzip_types
     # text/html is always compressed by HttpGzipModule
     text/css
     text/javascript
     text/xml
     text/plain
     text/x-component
     application/javascript
     application/json
     application/xml
     application/rss+xml
     font/truetype
     font/opentype
     application/vnd.ms-fontobject
     image/svg+xml;


  server {
      listen              8080 default_server;

      client_max_body_size 128M;
      client_body_timeout 1800;
      keepalive_timeout 5;

      # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
      # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
      # this particular website if it was disabled by the user.
      # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
      add_header X-XSS-Protection "1; mode=block";

      location / {
        root /app/public;
        index  index.html;
        try_files $uri $uri/ /index.html;
      }

      location /api {
        proxy_pass $BACKEND_URL;
        proxy_set_header Host $host;
      }




  }

}
